{"version":3,"file":"static/js/328.3707bf1d.chunk.js","mappings":"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","sources":["pages/Cast/Cast.styled.js","pages/Cast/Cast.jsx","shared/api/movies.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js"],"sourcesContent":["import styled from \"styled-components\";\n\n\nexport const Photo = styled.img`\n    display: block;\n    width: 150px;\n    margin-bottom: 10px;\n    margin-top: 10px;\n`\n\nexport const Title = styled.h2`\nfont-size: 16px;\nfont-family: 'Courier New', Courier, monospace;\n`\n\nexport const Text = styled.p`\nfont-size: 14px;\nfont-family: 'Courier New', Courier, monospace;\n`\n\nexport const Container = styled.div`\nwidth: 300px;\npadding: 20px;\n`\n\nexport const CharacterWrapper = styled.div`\n/* width: 250px;\nheight: 10px; */\nalign-items: center;\ndisplay: flex;\n`","import { useEffect, useState } from \"react\"\nimport { useParams } from \"react-router-dom\"\nimport { getCreditsByID } from \"shared/api/movies\"\nimport { Text, Photo, Title, Container, CharacterWrapper } from \"./Cast.styled\"\n\nconst Casts = () => {\n    const [state, setState] = useState({\n        casts: [],\n        loading: false,\n        error: null\n    })\n    const {movieId} = useParams()\n\n    useEffect(() => {\n        // console.log('object')\n        const fetchPosts = async() => {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true,\n                    error: null,\n    \n                }))\n            try {\n                const result = await getCreditsByID(movieId);\n                // console.log(\"getCreditsByID\", result)\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        casts:   [...result.data.cast]\n                    }\n                })\n               \n            } catch (error) {\n                console.log(error)\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false,\n\n                    }\n                })\n            }\n        }\n        fetchPosts() \n    }, [movieId]\n  )\n\n   const { casts } = state\n//    console.log(casts)\n   const url = \"https://image.tmdb.org/t/p/w500\"\n    const elements = casts.map(({id,name, profile_path, character}) => (\n        <li key={id}>\n            <Photo src={`${url}${profile_path}`}/>\n            <Text>{name}</Text>\n            <CharacterWrapper>\n                <Title>Character: </Title>\n                <Text>{character}</Text>\n            </CharacterWrapper>\n           \n        </li>\n    ))\n    \n    return ( \n        <Container>\n                 <h2>Cast</h2>\n                 <ul>\n                 {elements}\n                 </ul>\n      </Container> \n    )\n}\n\n\nexport default Casts","import axios from \"axios\";\n\nconst API_KEY = '799d796b985f1f6ed2e5b2e723499181';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: API_KEY,\n        _limit: 10,\n    }\n})\n\nexport const getMoviesByQuery = async (q) => {\n  try {\n    const response = await axios('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: q,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getGenres = async () => {\n    try {\n      const genres = await axios('/genre/movie/list', {\n        params: {\n          api_key: API_KEY,\n          \n        },\n      });\n\n      return genres.data.genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\nexport const getMovieByID = async(id) => {\n    try {\n      const response = await axios(`/movie/${id}`, {\n        params: {\n          api_key: API_KEY,\n        }\n      });\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\nexport const getMovies = async(_page = 1) => {\n    const {data} = await instance.get(\"/trending/movie/day\", {\n        params: {\n            api_key: API_KEY,\n            _page,\n        }\n    })\n    return data;\n}\n\nexport const getCreditsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getReviewsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}"],"names":["Photo","styled","Title","Text","Container","CharacterWrapper","useState","casts","loading","error","state","setState","movieId","useParams","useEffect","fetchPosts","prevState","getCreditsByID","result","data","cast","console","log","elements","map","id","name","profile_path","character","src","API_KEY","axios","instance","baseURL","params","api_key","_limit","getMoviesByQuery","q","query","response","getMovieByID","getMovies","_page","get","getReviewsByID","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","from","unsupportedIterableToArray","TypeError"],"sourceRoot":""}