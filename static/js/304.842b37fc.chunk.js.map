{"version":3,"file":"static/js/304.842b37fc.chunk.js","mappings":"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","sources":["pages/Home/Home.styled.js","pages/Home/Home.jsx","shared/api/movies.js","../node_modules/@babel/runtime/helpers/esm/toConsumableArray.js","../node_modules/@babel/runtime/helpers/esm/arrayWithoutHoles.js","../node_modules/@babel/runtime/helpers/esm/iterableToArray.js","../node_modules/@babel/runtime/helpers/esm/nonIterableSpread.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import styled from \"styled-components\";\n\n \n\nexport const Title = styled.h2`\n    font-size: 18px;\n    font-weight: 500;\n`","import { Title } from \"./Home.styled\"\nimport { Link } from \"react-router-dom\"\nimport { useEffect, useState } from \"react\"\nimport { getMovies } from \"shared/api/movies\";\nimport { nanoid } from \"nanoid\";\n\n\nconst Home = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null\n    })\n\n \n\n    useEffect(() => {\n        const fetchPosts = async() => {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true,\n                    error: null,\n    \n                }))\n            try {\n                const result = await getMovies();\n                // console.log(result)\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        items: [...prevState.items, ...result.results ]\n                    }\n                })\n               \n            } catch (error) {\n                console.log(error)\n            }\n            finally {\n                setState(prevState => {\n                    return {\n                        ...prevState,\n                        loading: false,\n\n                    }\n                })\n            }\n        }\n        fetchPosts() \n    }, []\n  )\n\n  const { items, loading, error } = state\n   \n  const elements = items.map(({id,original_title }) =>\n        <li key={nanoid()} id={id}>\n             <Link  state={{from: \"/\"}} to={`/movies/${id}`}>{original_title}</Link>\n        </li>)\n \n\n    return (\n        <div>\n            <Title>Trending Today</Title>\n            <ol>{elements}</ol>\n            {loading && <p>... loading movies</p>}\n            {error && <p>...movies not found</p>}\n        </div>\n        \n    )\n}\n\nexport default Home","import axios from \"axios\";\n\nconst API_KEY = '799d796b985f1f6ed2e5b2e723499181';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: API_KEY,\n        _limit: 10,\n    }\n})\n\nexport const getMoviesByQuery = async (q) => {\n  try {\n    const response = await axios('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: q,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getGenres = async () => {\n    try {\n      const genres = await axios('/genre/movie/list', {\n        params: {\n          api_key: API_KEY,\n          \n        },\n      });\n\n      return genres.data.genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\nexport const getMovieByID = async(id) => {\n    try {\n      const response = await axios(`/movie/${id}`, {\n        params: {\n          api_key: API_KEY,\n        }\n      });\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\nexport const getMovies = async(_page = 1) => {\n    const {data} = await instance.get(\"/trending/movie/day\", {\n        params: {\n            api_key: API_KEY,\n            _page,\n        }\n    })\n    return data;\n}\n\nexport const getCreditsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getReviewsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}","import arrayWithoutHoles from \"./arrayWithoutHoles.js\";\nimport iterableToArray from \"./iterableToArray.js\";\nimport unsupportedIterableToArray from \"./unsupportedIterableToArray.js\";\nimport nonIterableSpread from \"./nonIterableSpread.js\";\nexport default function _toConsumableArray(arr) {\n  return arrayWithoutHoles(arr) || iterableToArray(arr) || unsupportedIterableToArray(arr) || nonIterableSpread();\n}","import arrayLikeToArray from \"./arrayLikeToArray.js\";\nexport default function _arrayWithoutHoles(arr) {\n  if (Array.isArray(arr)) return arrayLikeToArray(arr);\n}","export default function _iterableToArray(iter) {\n  if (typeof Symbol !== \"undefined\" && iter[Symbol.iterator] != null || iter[\"@@iterator\"] != null) return Array.from(iter);\n}","export default function _nonIterableSpread() {\n  throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\");\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["Title","styled","useState","items","loading","error","state","setState","useEffect","fetchPosts","prevState","getMovies","result","results","console","log","elements","map","id","original_title","from","to","nanoid","API_KEY","axios","instance","baseURL","params","api_key","_limit","getMoviesByQuery","q","query","response","getMovieByID","_page","get","data","getCreditsByID","getReviewsByID","_toConsumableArray","arr","Array","isArray","arrayLikeToArray","iter","Symbol","iterator","unsupportedIterableToArray","TypeError","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}