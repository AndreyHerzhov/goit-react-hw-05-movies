{"version":3,"file":"static/js/900.1feab89e.chunk.js","mappings":"uQA8BA,EA5ByB,SAAC,GAAgB,IAAfA,EAAc,EAAdA,SACvB,GAA0BC,EAAAA,EAAAA,UAAS,CAC/BC,OAAQ,KADZ,eAAOC,EAAP,KAAcC,EAAd,KAmBA,OACI,kBAAMJ,SATW,SAACK,GAClBA,EAAEC,iBACFN,GAAS,UAAIG,IACbC,EAAS,CACLF,OAAQ,IAEf,EAGG,WACI,kBAAOK,MAAOJ,EAAMD,OAAQM,SAjBf,SAAC,GAAc,IAAbC,EAAY,EAAZA,OACZC,EAAeD,EAAfC,KAAMH,EAASE,EAATF,MACbH,GAAS,kBACFD,GADC,cAEHO,EAAOH,IAEf,EAW2DG,KAAK,YACzD,yCAGX,E,SC1BYC,E,QAAoBC,GAAAA,IAAH,wC,6BC8E9B,EAvEe,WACX,OAA0BX,EAAAA,EAAAA,UAAS,CAC/BY,MAAO,GACPC,SAAS,EACTC,MAAO,OAHX,eAAOZ,EAAP,KAAcC,EAAd,KAMA,GAAwCY,EAAAA,EAAAA,MAAxC,eAAOC,EAAP,KAAqBC,EAArB,KAEMhB,EAASe,EAAaE,IAAI,WAGhCC,EAAAA,EAAAA,YAAU,WACN,IAAMC,EAAU,mCAAG,oGAEXjB,GAAS,SAAAkB,GAAS,yBACXA,GADW,IAEdR,SAAS,GAFK,IAFP,UAMQS,EAAAA,EAAAA,IAAiBrB,GANzB,OAMLsB,EANK,OAQXpB,GAAS,SAAAkB,GAAS,yBACXA,GADW,IAEdT,MAAOW,EAAKA,KAAKC,SAFH,IARP,gDAcXrB,GAAS,SAAAkB,GAAS,yBACXA,GADW,IAEdP,MAAK,MAFS,IAdP,yBAoBXX,GAAS,SAAAkB,GAAS,yBACXA,GADW,IAEdR,SAAS,GAFK,IApBP,4EAAH,qDA2BbZ,GACCmB,GAEP,GAAE,CAACnB,IAEJ,IASUwB,EAFQvB,EAAVU,MAEmBc,KAAI,gBAAEC,EAAF,EAAEA,GAAGC,EAAL,EAAKA,eAAL,OAC3B,eAAmBD,GAAIA,EAAvB,UACK,SAAC,KAAD,CAAMzB,MAAO,CAAC2B,KAAK,kBAAD,OAAoB5B,IAAW6B,GAAE,kBAAaH,GAAhE,SAAuEC,MADnEG,EAAAA,EAAAA,MADkB,IAM/B,OAEI,UAACrB,EAAD,YACG,SAAC,EAAD,CAAkBX,SAlBJ,SAAC,GAAc,IAAbE,EAAY,EAAZA,OAClBgB,EAAgB,CAAChB,OAAAA,GACrB,KAiBW,wBAAKwB,MAKpB,C,4MC5EKO,EAAU,mCAChBC,IAAAA,SAAAA,QAAyB,+BAEzB,IAAMC,EAAWD,IAAAA,OAAa,CAC1BE,QAAS,+BACTC,OAAQ,CACJC,QAASL,EACTM,OAAQ,MAIHhB,EAAgB,mCAAG,WAAOiB,GAAP,gGAELN,IAAM,gBAAiB,CAC5CG,OAAQ,CACNC,QAASL,EACTQ,MAAOD,KALiB,cAEtBE,EAFsB,yBASrBA,GATqB,gCAW5BC,QAAQC,IAAR,MAX4B,yDAAH,sDA8BhBC,EAAY,mCAAG,WAAMjB,GAAN,gGAECM,IAAM,UAAD,OAAWN,GAAM,CAC3CS,OAAQ,CACNC,QAASL,KAJS,cAEhBS,EAFgB,yBAQfA,GARe,gCAUtBC,QAAQC,IAAR,MAVsB,yDAAH,sDAeZE,EAAS,mCAAG,2GAAMC,EAAN,+BAAc,EAAd,SACAZ,EAAShB,IAAI,sBAAuB,CACrDkB,OAAQ,CACJC,QAASL,EACTc,MAAAA,KAJa,uBACdvB,EADc,EACdA,KADc,kBAOdA,GAPc,2CAAH,qDAUTwB,EAAc,mCAAG,WAAMpB,GAAN,gGAEHM,IAAM,UAAD,OAAWN,EAAX,YAAyB,CACnDS,OAAQ,CACNC,QAASL,KAJa,cAEpBS,EAFoB,yBAQnBA,GARmB,gCAU1BC,QAAQC,IAAR,MAV0B,yDAAH,sDAcdK,EAAc,mCAAG,WAAMrB,GAAN,gGAEHM,IAAM,UAAD,OAAWN,EAAX,YAAyB,CACnDS,OAAQ,CACNC,QAASL,KAJa,cAEpBS,EAFoB,yBAQnBA,GARmB,gCAU1BC,QAAQC,IAAR,MAV0B,yDAAH,qD,wDCjFpB,IAkBIZ,EAAS,eAACkB,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC1B,EAAI2B,GAWvD,OARE3B,IAFF2B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,GAGT,GAAE,GAbe,C","sources":["pages/MovieSearchForm/MovieSearchForm.jsx","pages/Movies/Movies.styled.js","pages/Movies/Movies.jsx","shared/api/movies.js","../node_modules/nanoid/index.browser.js"],"sourcesContent":["import { useState } from \"react\"\n\nconst MoviesSearchForm = ({onSubmit}) => {\n    const [state, setState] = useState({\n        search: \"\",\n    })\n\n    const handleChange = ({target}) => {\n        const {name, value} = target;\n        setState({\n            ...state,\n            [name]: value \n        })\n    }\n    const handleSubmit = (e) => {\n        e.preventDefault()\n        onSubmit({...state})\n        setState({\n            search: \"\"\n        })\n    }\n\n    return (\n        <form onSubmit={handleSubmit}>\n            <input value={state.search} onChange={handleChange} name=\"search\"  />\n            <button>Search</button>\n        </form>\n    )\n}\n\nexport default MoviesSearchForm","import styled from \"styled-components\";\n\nexport const FilmListContainer = styled.div`\npadding: 20px;\n`","import MoviesSearchForm from \"pages/MovieSearchForm/MovieSearchForm\"\nimport { FilmListContainer } from \"./Movies.styled\"\nimport { useSearchParams } from \"react-router-dom\"\nimport { Link } from \"react-router-dom\"\nimport { getMoviesByQuery } from \"shared/api/movies\"\nimport { useEffect } from \"react\"\nimport { useState } from \"react\"\nimport { nanoid } from \"nanoid\"\n\nconst Movies = () => {\n    const [state, setState] = useState({\n        items: [],\n        loading: false,\n        error: null\n    })\n\n    const [searchParams, setSearchParams] = useSearchParams()\n  \n    const search = searchParams.get(\"search\")\n   \n\n    useEffect(() => {\n        const fetchPosts = async() => {\n            try {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: true\n                }))\n                const data = await getMoviesByQuery(search)\n                // console.log(data)\n                setState(prevState => ({\n                    ...prevState,\n                    items: data.data.results\n                }))\n                // console.log(data)\n            } catch (error) {\n                setState(prevState => ({\n                    ...prevState,\n                    error\n                }))\n            }\n            finally {\n                setState(prevState => ({\n                    ...prevState,\n                    loading: false\n                }))\n            }\n        }\n\n        if(search) {\n            fetchPosts()\n        }\n    }, [search])\n\n    const changeSearch = ({search}) => {\n         setSearchParams({search})\n    }\n\n   \n \n    // const elements = ''\n    const { items } = state\n    \n        const elements = items.map(({id,original_title }) =>\n        <li key={nanoid()} id={id}>\n             <Link state={{from: `/movies?search=${search}`}} to={`/movies/${id}`}>{original_title}</Link>\n        </li>)\n     \n  \n    return (\n         \n        <FilmListContainer>\n           <MoviesSearchForm onSubmit={changeSearch}/>\n                <ul>{elements}</ul>\n        </FilmListContainer>\n            \n         \n    )\n}\n\nexport default Movies","import axios from \"axios\";\n\nconst API_KEY = '799d796b985f1f6ed2e5b2e723499181';\naxios.defaults.baseURL = 'https://api.themoviedb.org/3';\n\nconst instance = axios.create({\n    baseURL: \"https://api.themoviedb.org/3\",\n    params: {\n        api_key: API_KEY,\n        _limit: 10,\n    }\n})\n\nexport const getMoviesByQuery = async (q) => {\n  try {\n    const response = await axios('/search/movie', {\n      params: {\n        api_key: API_KEY,\n        query: q,\n      },\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getGenres = async () => {\n    try {\n      const genres = await axios('/genre/movie/list', {\n        params: {\n          api_key: API_KEY,\n          \n        },\n      });\n\n      return genres.data.genres;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\nexport const getMovieByID = async(id) => {\n    try {\n      const response = await axios(`/movie/${id}`, {\n        params: {\n          api_key: API_KEY,\n        }\n      });\n\n      return response;\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n\nexport const getMovies = async(_page = 1) => {\n    const {data} = await instance.get(\"/trending/movie/day\", {\n        params: {\n            api_key: API_KEY,\n            _page,\n        }\n    })\n    return data;\n}\n\nexport const getCreditsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/credits`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}\n\nexport const getReviewsByID = async(id) => {\n  try {\n    const response = await axios(`/movie/${id}/reviews`, {\n      params: {\n        api_key: API_KEY,\n      }\n    });\n\n    return response;\n  } catch (error) {\n    console.log(error);\n  }\n}","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n"],"names":["onSubmit","useState","search","state","setState","e","preventDefault","value","onChange","target","name","FilmListContainer","styled","items","loading","error","useSearchParams","searchParams","setSearchParams","get","useEffect","fetchPosts","prevState","getMoviesByQuery","data","results","elements","map","id","original_title","from","to","nanoid","API_KEY","axios","instance","baseURL","params","api_key","_limit","q","query","response","console","log","getMovieByID","getMovies","_page","getCreditsByID","getReviewsByID","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase"],"sourceRoot":""}